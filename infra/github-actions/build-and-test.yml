name: Build and Test

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  NODE_VERSION: '18.17.0'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        workspace: [api, frontend, sentinel]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint --workspace=${{ matrix.workspace }} --if-present
        
      - name: Run type checking
        run: npm run type-check --workspace=${{ matrix.workspace }} --if-present
        
      - name: Run tests
        run: npm test --workspace=${{ matrix.workspace }} --if-present
        env:
          NODE_ENV: test
          
      - name: Build workspace
        run: npm run build --workspace=${{ matrix.workspace }}
        
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        
      - name: Check for vulnerabilities
        run: npm audit --audit-level=high --production
        
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/docker/Dockerfile
          push: false
          tags: meme-coin-radar-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test Docker image
        run: |
          docker run --rm -d --name test-api -p 3001:3001 \
            -e NODE_ENV=test \
            -e PORT=3001 \
            meme-coin-radar-api:test
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:3001/health || exit 1
          
          # Cleanup
          docker stop test-api
          
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [test, security, docker-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check bundle size (Frontend)
        run: |
          npm run build --workspace=frontend
          # Add bundle size analysis here if needed
          
      - name: Performance tests
        run: |
          # Add performance testing if needed
          echo "Performance tests would run here"
          
      - name: Code coverage
        run: |
          npm run test:coverage --workspace=api --if-present
          
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: always()
    
    steps:
      - name: Notify Discord on failure
        if: failure() && github.ref == 'refs/heads/main'
        run: |
          curl -H "Content-Type: application/json" \
            -d "{\"content\":\"ðŸš¨ Build failed on main branch: ${{ github.sha }}\"}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
            
      - name: Notify Discord on success
        if: success() && github.ref == 'refs/heads/main'
        run: |
          curl -H "Content-Type: application/json" \
            -d "{\"content\":\"âœ… Build successful on main branch: ${{ github.sha }}\"}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}