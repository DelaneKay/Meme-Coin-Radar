name: Deploy API

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'api/**'
      - 'shared/**'
      - 'package*.json'
      - 'infra/docker/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18.17.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: meme-coin-radar-api

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: determine-environment
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          
  deploy-to-render:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-push]
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Render
        run: |
          # Trigger Render deployment via webhook
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "imageUrl": "${{ needs.build-and-push.outputs.image-tag }}",
              "gitCommitSha": "${{ github.sha }}",
              "gitBranch": "${{ github.ref_name }}"
            }'
            
      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60
          
      - name: Health check
        run: |
          # Determine the correct URL based on environment
          if [[ "${{ needs.determine-environment.outputs.environment }}" == "production" ]]; then
            HEALTH_URL="${{ secrets.PROD_API_URL }}/health"
          else
            HEALTH_URL="${{ secrets.STAGING_API_URL }}/health"
          fi
          
          # Wait for service to be ready
          for i in {1..30}; do
            if curl -f "$HEALTH_URL"; then
              echo "Health check passed!"
              exit 0
            fi
            echo "Health check failed, retrying in 10 seconds..."
            sleep 10
          done
          
          echo "Health check failed after 5 minutes"
          exit 1
          
      - name: Run smoke tests
        run: |
          # Determine the correct URL based on environment
          if [[ "${{ needs.determine-environment.outputs.environment }}" == "production" ]]; then
            API_URL="${{ secrets.PROD_API_URL }}"
          else
            API_URL="${{ secrets.STAGING_API_URL }}"
          fi
          
          # Test key endpoints
          curl -f "$API_URL/api/signals/leaderboards/hotlist" || exit 1
          curl -f "$API_URL/api/signals/leaderboards/trending" || exit 1
          
          echo "Smoke tests passed!"
          
  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-to-render]
    if: always()
    
    steps:
      - name: Notify Discord on success
        if: success()
        run: |
          ENV="${{ needs.determine-environment.outputs.environment }}"
          curl -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"üöÄ API Deployment Successful\",
                \"description\": \"Environment: **$ENV**\\nCommit: \`${{ github.sha }}\`\\nBranch: \`${{ github.ref_name }}\`\",
                \"color\": 3066993,
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
              }]
            }" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
            
      - name: Notify Discord on failure
        if: failure()
        run: |
          ENV="${{ needs.determine-environment.outputs.environment }}"
          curl -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"‚ùå API Deployment Failed\",
                \"description\": \"Environment: **$ENV**\\nCommit: \`${{ github.sha }}\`\\nBranch: \`${{ github.ref_name }}\`\\n\\n[View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\",
                \"color\": 15158332,
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
              }]
            }" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-to-render]
    if: failure() && needs.determine-environment.outputs.environment == 'production'
    
    steps:
      - name: Trigger rollback
        run: |
          echo "Triggering automatic rollback..."
          curl -X POST "${{ secrets.RENDER_ROLLBACK_HOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{"reason": "Deployment health check failed"}'
            
      - name: Notify rollback
        run: |
          curl -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"üîÑ API Rollback Triggered\",
                \"description\": \"Production deployment failed and has been rolled back.\\nCommit: \`${{ github.sha }}\`\",
                \"color\": 16776960,
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
              }]
            }" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}