version: '3.8'

# Meme Coin Radar - Scheduler Service
# Docker Compose configuration for running the job scheduler

services:
  scheduler:
    build:
      context: ../../
      dockerfile: ops/cron/Dockerfile.scheduler
    container_name: meme-coin-scheduler
    restart: unless-stopped
    
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - ENABLE_HEALTH_ENDPOINT=true
      - HEALTH_PORT=3001
      
      # Redis configuration
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      
      # Database configuration
      - DATABASE_URL=${DATABASE_URL}
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-meme_coin_radar}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      
      # External API keys
      - DEXSCREENER_API_KEY=${DEXSCREENER_API_KEY}
      - GOPLUS_API_KEY=${GOPLUS_API_KEY}
      - BIRDEYE_API_KEY=${BIRDEYE_API_KEY}
      - COINGECKO_API_KEY=${COINGECKO_API_KEY}
      
      # Notification settings
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
      - EMAIL_SMTP_PORT=${EMAIL_SMTP_PORT}
      - EMAIL_SMTP_USER=${EMAIL_SMTP_USER}
      - EMAIL_SMTP_PASSWORD=${EMAIL_SMTP_PASSWORD}
      
      # Security settings
      - JWT_SECRET=${JWT_SECRET}
      - API_SECRET_KEY=${API_SECRET_KEY}
      
      # Monitoring
      - PROMETHEUS_ENABLED=true
      - METRICS_PORT=9090
      
    ports:
      - "3001:3001"  # Health endpoint
      - "9090:9090"  # Metrics endpoint
      
    volumes:
      - ./cron-config.yml:/app/ops/cron/cron-config.yml:ro
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For container monitoring
      
    networks:
      - meme-coin-network
      
    depends_on:
      - redis
      - postgres
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
          
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.scheduler.rule=Host(\`scheduler.meme-coin-radar.local\`)"
      - "traefik.http.services.scheduler.loadbalancer.server.port=3001"
      - "com.meme-coin-radar.service=scheduler"
      - "com.meme-coin-radar.version=1.0.0"

  # Redis for caching and job coordination
  redis:
    image: redis:7-alpine
    container_name: meme-coin-redis
    restart: unless-stopped
    
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      
    ports:
      - "6379:6379"
      
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
      
    networks:
      - meme-coin-network
      
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
      
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # PostgreSQL for persistent data
  postgres:
    image: postgres:15-alpine
    container_name: meme-coin-postgres
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=${DB_NAME:-meme_coin_radar}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      
    ports:
      - "5432:5432"
      
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      
    networks:
      - meme-coin-network
      
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: meme-coin-prometheus
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      
    ports:
      - "9091:9090"
      
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
      
    networks:
      - meme-coin-network
      
    depends_on:
      - scheduler
      
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: meme-coin-grafana
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      
    ports:
      - "3000:3000"
      
    volumes:
      - grafana_data:/var/lib/grafana
      - ../dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      
    networks:
      - meme-coin-network
      
    depends_on:
      - prometheus
      
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: meme-coin-loki
    restart: unless-stopped
    
    command: -config.file=/etc/loki/local-config.yaml
    
    ports:
      - "3100:3100"
      
    volumes:
      - loki_data:/loki
      - ./loki-config.yml:/etc/loki/local-config.yaml:ro
      
    networks:
      - meme-coin-network

  # Log shipping with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: meme-coin-promtail
    restart: unless-stopped
    
    command: -config.file=/etc/promtail/config.yml
    
    volumes:
      - ./logs:/var/log/meme-coin-radar:ro
      - ./promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      
    networks:
      - meme-coin-network
      
    depends_on:
      - loki

# Networks
networks:
  meme-coin-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  redis_data:
    driver: local
    
  postgres_data:
    driver: local
    
  prometheus_data:
    driver: local
    
  grafana_data:
    driver: local
    
  loki_data:
    driver: local

# Health check and monitoring
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

# Resource limits template
x-resource-limits: &resource-limits
  deploy:
    resources:
      limits:
        memory: 512M
        cpus: '0.5'
      reservations:
        memory: 256M
        cpus: '0.25'

# Logging template
x-logging-defaults: &logging-defaults
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"